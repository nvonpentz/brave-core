import("//brave/build/cargo.gni")

if (is_mac) {
  import("//build/config/mac/mac_sdk.gni")
}

cargo_build("rust_lib") {
  visibility = [ ":*" ]
  inputs = [
    "Cargo.lock",
    "Cargo.toml",
    "lib.rs",
  ]

  build_path = lib_build_path
  output = lib_output_path
  manifest_path = "Cargo.toml"

  # ensure that we rebuild when the dependent crates change
  # TODO(bridiver) - selectively include these libraries based on buildflags,
  # but in order to do that we have to dynamically create the brave rust lib
  deps = [
    "//brave/components/adblock_rust_ffi:rust_lib",
    "//brave/components/challenge_bypass_ristretto:rust_lib",
    "//brave/components/skus/browser/rs/cxx:rust_lib",
    "//brave/components/speedreader/rust/lib",
  ]
}

if (is_mac) {
  action("generate_unexport_list") {
    script = "//brave/build/rust/generate_unexport_list.py"

    inputs = [
      "//brave/build/rust/generate_unexport_list.py",
      lib_output_path,
    ]

    outputs = [
      unexport_list_path
    ]

    args = [
      "--bin_path=" + mac_bin_path,
      "--input=" + rebase_path(lib_output_path, root_build_dir),
      "--output=" + rebase_path(unexport_list_path, root_build_dir)
    ]

    deps = [ ":rust_lib" ]
  }
}

# The required config for cxx-generated bindings because Chromium C++ is built
# with -fno-exceptions.
config("cxx_cppconfig") {
  defines = [ "RUST_CXX_NO_EXCEPTIONS" ]
}

copy("cxx_source") {
  visibility = [ ":cxx_cppdeps" ]
  # TODO(bridiver) - get path from Cargo.toml or python
  sources = [
    "//brave/build/rustup/0.1.8/registry/src/github.com-1ecc6299db9ec823/cxx-1.0.56/src/cxx.cc",
  ]
  outputs = [
    "$root_out_dir/gen/brave/third_party/rust/cxx/src/cxx.cc",
  ]
}

copy("cxx_header") {
  visibility = [ ":cxx_cppdeps" ]
  # TODO(bridiver) - get path from Cargo.toml or python
  sources = [
    "//brave/build/rustup/0.1.8/registry/src/github.com-1ecc6299db9ec823/cxx-1.0.56/include/cxx.h",
  ]
  outputs = [
    "$root_out_dir/gen/brave/third_party/rust/cxx/include/cxx.h",
  ]
}

# The required dependencies for cxx-generated bindings, that must be included
# on the C++ side.
source_set("cxx_cppdeps") {
  sources = get_target_outputs(":cxx_source")
  sources += get_target_outputs(":cxx_header")
  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [ "//build/config/compiler:no_chromium_code" ]
  public_configs = [ ":cxx_cppconfig" ]
  deps = [
    ":cxx_source",
    ":cxx_header",
  ]
}
